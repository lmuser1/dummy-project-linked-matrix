"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from . import custommiddleware

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-j^ok1fb4lntmfj9*y^f9n5%=+)2m=^=9p01(gxep%6p283rbz_'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'hello',
    'blacklist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #'storefront.custommiddleware.BlockedIpMiddleware',
    'blacklist.middleware.BlacklistMiddleware',

]

BLOCKED_IPS = (
    '127.0.0.1',
    )

ROOT_URLCONF = 'storefront.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'storefront.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# import logging
# import os

# class IPAddressFilter(logging.Filter):

#     def filter(self, record):
#         if hasattr(record, 'request'):
#             x_forwarded_for = record.request.META.get('HTTP_X_FORWARDED_FOR')
#             if x_forwarded_for:
#                 record.ip = x_forwarded_for.split(',')[0]
#             else:
#                 record.ip = record.request.META.get('REMOTE_ADDR')
#         return True


# LOGGING = {
#     "version": 1,
#     "formatters": {
#         "request_formatter": {
#             "format": "%(asctime)s - %(ip)s ",
            
#             "datefmt": "%Y-%m-%d %H:%M:%S"
#         },
#     },
#     "handlers": {
#         "request": {
#             "level": "INFO",
#             "class": "logging.handlers.RotatingFileHandler",
#             "filename": "./logs/debug.txt",
#             "formatter": "request_formatter"
#         }
#     },
#     'filter': {
#         'ipaddress': {
#             '()': 'settings.IPAddressFilter'
#         }
#     },
#     "loggers": {
#         'django.request': {
#             "level": "WARNING",
#             'filter': ['ipaddress'],
#              "handlers": ["request"]
#         },
#     },
#     "disable_existing_loggers": True
# }


